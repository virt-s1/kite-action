---
- hosts: localhost
  gather_facts: no
  become: no
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_connection: local
    cloud_profile: "rhos-01"

  tasks:
    - set_fact:
        instance_name: "github-container-runner-f38-{{ repo_fullname | replace('/','-') }}"

    - name: Deploy container runner on openstack
      block:
        - name: Create keypair for rhel-edge test
          openstack.cloud.keypair:
            cloud: "{{ cloud_profile }}"
            state: present
            name: "rhel-edge"
            public_key_file: "{{ playbook_dir }}/key/ostree_key.pub"

        - name: Deploy Fedora instance
          openstack.cloud.server:
            cloud: "{{ cloud_profile }}"
            name: "{{ instance_name }}"
            image: "edge-fedora-38"
            flavor: "ci.standard.large"
            network: "shared_net_9"
            key_name: "rhel-edge"
            security_groups: ssh_only
            auto_ip: yes
            config_drive: yes
            wait: yes
            timeout: 600
            userdata: |
              #cloud-config
              users:
                - default
                - name: admin
                  gecos: Administrator
                  groups: users,wheel
                  sudo: ALL=(ALL) NOPASSWD:ALL
                  ssh_authorized_keys:
                    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCzxo5dEcS+LDK/OFAfHo6740EyoDM8aYaCkBala0FnWfMMTOq7PQe04ahB0eFLS3IlQtK5bpgzxBdFGVqF6uT5z4hhaPjQec0G3+BD5Pxo6V+SxShKZo+ZNGU3HVrF9p2V7QH0YFQj5B8F6AicA3fYh2BVUFECTPuMpy5A52ufWu0r4xOFmbU7SIhRQRAQz2u4yjXqBsrpYptAvyzzoN4gjUhNnwOHSPsvFpWoBFkWmqn0ytgHg3Vv9DlHW+45P02QH1UFedXR2MqLnwRI30qqtaOkVS+9rE/dhnR+XPpHHG+hv2TgMDAuQ3IK7Ab5m/yCbN73cxFifH4LST0vVG3Jx45xn+GTeHHhfkAfBSCtya6191jixbqyovpRunCBKexI5cfRPtWOitM3m7Mq26r7LpobMM+oOLUm4p0KKNIthWcmK9tYwXWSuGGfUQ+Y8gt7E0G06ZGbCPHOrxJ8lYQqXsif04piONPA/c9Hq43O99KPNGShONCS9oPFdOLRT3U= ostree-image-test
              packages:
                - python3
                - python3-dnf

        - name: Makre sure VM is running
          openstack.cloud.server_info:
            cloud: "{{ cloud_profile }}"
            server: "{{ instance_name }}"
          register: instance_status_result
          retries: 20
          until: instance_status_result.servers[0].vm_state == "active" and instance_status_result.servers[0].access_ipv4 != ""

        - set_fact:
            instance_ip: "{{ instance_status_result.servers[0].addresses.shared_net_9[0].addr }}"
          when:
            - instance_status_result is succeeded

    - name: Waits until instance is reachable
      wait_for:
        host: "{{ instance_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      retries: 30
      register: result_ssh_check
      until: result_ssh_check is success

    - name: Add instance ip into host group guest
      add_host:
        name: "{{ instance_ip }}"
        groups: guest
        runner_name: "{{ instance_name }}"

    - name: set private key permission to 600
      file:
        path: key/ostree_key
        mode: "0600"

- hosts: guest
  gather_facts: no
  become: no
  vars:
    arch_short: "x64"
    runner_labels: "container-runner"
    runner_user: admin
    runner_dir: /opt/actions-runner
    hide_sensitive_logs: yes
    github_url: "https://github.com"
    github_api_url: "https://api.github.com"
    access_token: "{{ lookup('env', 'PERSONAL_ACCESS_TOKEN') }}"
    runner_download_repository: "actions/runner"
    repo_fullname: "virt-s1/rhel-edge"

  tasks:
    - name: Ensure cloud-init has finished
      raw: test -f /var/lib/cloud/instance/boot-finished
      retries: 30
      delay: 20
      register: cloud_init_check
      changed_when: false
      until: cloud_init_check is success

    - name: Set complete API url for repo runner
      set_fact:
        github_full_api_url: "{{ github_api_url }}/repos/{{ repo_fullname }}/actions/runners"

    - name: Get registration token
      uri:
        url: "{{ github_full_api_url }}/registration-token"
        headers:
          Authorization: "token {{ access_token }}"
          Accept: "application/vnd.github.v3+json"
        method: POST
        status_code: 201
        force_basic_auth: yes
      register: registration
      delegate_to: localhost

    - name: Install dnf-plugins-core to manage repo
      package:
        name: dnf-plugins-core
        state: present
      become: yes

    - name: Add docker-ce repo
      command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
      become: yes

    - name: Install required packages
      package:
        name:
          - acl
          - lttng-ust
          - openssl-libs
          - krb5-libs
          - zlib
          - libicu
          - tar
          - unzip
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      become: yes

    - name: start Docker
      systemd:
        name: docker
        state: started
        enabled: yes
      become: yes

    - name: Change docker.sock permission
      file:
        path: /var/run/docker.sock
        mode: 0666
      become: yes

    - name: Create directory
      file:
        path: "{{ runner_dir }}"
        state: directory
        mode: 0755
        owner: "{{ runner_user }}"
      become: yes

    - name: Find the latest runner version
      uri:
        url: "https://api.github.com/repos/{{ runner_download_repository }}/releases/latest"
        headers:
          Authorization: "token {{ access_token }}"
          Content-Type: "application/json"
        method: GET
        return_content: yes
        status_code: 200
        body_format: json
      register: api_response
      delegate_to: localhost

    - name: Set runner_version variable
      set_fact:
        runner_version: "{{ api_response.json.tag_name | regex_replace('^v', '') }}"

    - name: Create temporary directory for archive
      tempfile:
        state: directory
      register: tempdir_result
      delegate_to: localhost

    - set_fact:
        runner_pkg_tempdir: "{{ tempdir_result.path }}"

    - name: Download runner package version - "{{ runner_version }}" from S3
      get_url:
        url:
          "https://kite-storage.s3.amazonaws.com/actions-runner-linux-{{ arch_short }}-{{ runner_version }}.tar.gz"
        dest: "{{ runner_pkg_tempdir }}/actions-runner-linux-{{ arch_short }}-{{ runner_version }}.tar.gz"
        force: no
      register: s3_download_result
      delegate_to: localhost
      ignore_errors: yes

    - name: Download runner package version - "{{ runner_version }}" from github
      get_url:
        url:
          "{{ github_url }}/{{ runner_download_repository }}/releases/download/v{{ runner_version }}/\
           actions-runner-linux-{{ arch_short }}-{{ runner_version }}.tar.gz"
        dest: "{{ runner_pkg_tempdir }}/actions-runner-linux-{{ arch_short }}-{{ runner_version }}.tar.gz"
        force: no
      delegate_to: localhost
      when: s3_download_result is failed

    - name: Unarchive package
      unarchive:
        src: "{{ runner_pkg_tempdir }}/actions-runner-linux-{{ arch_short }}-{{ runner_version }}.tar.gz"
        dest: "{{ runner_dir }}/"
        owner: "{{ runner_user }}"
        mode: 0755

    - name: Remove temporary archive directory
      file:
        path: "{{ runner_pkg_tempdir }}"
        state: absent
      delegate_to: localhost

    - name: Configure custom env file if required
      blockinfile:
        path: "{{ runner_dir }}/.env"
        block: "{{ custom_env }}"
        owner: "{{ runner_user }}"
        create: yes
        mode: 0755
        marker_begin: "# BEGIN ANSIBLE MANAGED BLOCK"
        marker_end: "# END ANSIBLE MANAGED BLOCK"
      when: custom_env is defined

    - name: Set complete GitHub url for repo runner
      set_fact:
        github_full_url: "{{ github_url }}/{{ repo_fullname }}"

    - name: Register runner
      command:
        "{{ runner_dir }}/./config.sh \
        --url {{ github_full_url }} \
        --token {{ registration.json.token }} \
        --name {{ runner_name }} \
        --labels {{ runner_labels }} \
        --unattended"
      args:
        chdir: "{{ runner_dir }}"
      become: yes
      become_user: "{{ runner_user }}"

    - name: Install service
      command: "./svc.sh install {{ runner_user }}"
      args:
        chdir: "{{ runner_dir }}"
      become: yes

    - name: Read service name from file
      slurp:
        src: "{{ runner_dir }}/.service"
      register: runner_service

    - name: START and enable Github Actions Runner service
      systemd:
        name: "{{ runner_service.content | b64decode | replace('\n', '') }}"
        state: started
        enabled: yes
      become: yes
