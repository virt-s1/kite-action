---
- hosts: gcp
  gather_facts: no
  become: no
  vars:
    gcp_storage_bucket_name: "{{ lookup('env', 'GCP_STORAGE_BUCKET_NAME') }}"
    gcp_service_account_file: "{{ lookup('env', 'GCP_SERVICE_ACCOUNT_FILE') }}"
    gcp_service_account_name: "{{ lookup('env', 'GCP_SERVICE_ACCOUNT_NAME') }}"
    gcp_project: "{{ lookup('env', 'GCP_PROJECT') }}"
    os: "fedora-rawhide"
    image_url:
      fedora-rawhide: https://dl.fedoraproject.org/pub/fedora/linux/development/rawhide/Cloud/x86_64/images
      fedora-39: https://dl.fedoraproject.org/pub/fedora/linux/development/39/Cloud/x86_64/images
      fedora-38: https://dl.fedoraproject.org/pub/fedora/linux/releases/38/Cloud/x86_64/images
      fedora-37: https://dl.fedoraproject.org/pub/fedora/linux/releases/37/Cloud/x86_64/images
    # image name must be a match of regex '[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?|[1-9][0-9]{0,19}'
    gcp_image_name:
      fedora-rawhide: "kite-image-fedora-rawhide"
      fedora-39: "kite-image-fedora-39"
      fedora-38: "kite-image-fedora-38"
      fedora-37: "kite-image-fedora-37"

  tasks:
    - name: get latest Fedora rawhide images
      shell: curl -s {{ image_url[os] }}/ | grep -ioE '>Fedora-Cloud-Base-GCP-Rawhide-.*.x86_64.tar.gz<' | tr -d '><'
      register: result_file
      when: os == "fedora-rawhide"

    - set_fact:
        image_file_name: "{{ result_file.stdout }}"
      when:
        - os == "fedora-rawhide"
        - result_file.changed

    - name: get latest Fedora 39 images
      shell: curl -s {{ image_url[os] }}/ | grep -ioE '>Fedora-Cloud-Base-GCP-39-.*.x86_64.tar.gz<' | tr -d '><'
      register: result_file
      when: os == "fedora-39"

    - set_fact:
        image_file_name: "{{ result_file.stdout }}"
      when:
        - os == "fedora-39"
        - result_file.changed

    - name: get latest Fedora 38 images
      shell: curl -s {{ image_url[os] }}/ | grep -ioE '>Fedora-Cloud-Base-GCP-38-.*.x86_64.tar.gz<' | tr -d '><'
      register: result_file
      when: os == "fedora-38"

    - set_fact:
        image_file_name: "{{ result_file.stdout }}"
      when:
        - os == "fedora-38"
        - result_file.changed

    - name: get latest Fedora 37 images
      shell: curl -s {{ image_url[os] }}/ | grep -ioE '>Fedora-Cloud-Base-GCP-37-.*.x86_64.tar.gz<' | tr -d '><'
      register: result_file
      when: os == "fedora-37"

    - set_fact:
        image_file_name: "{{ result_file.stdout }}"
      when:
        - os == "fedora-37"
        - result_file.changed

    - name: download image
      get_url:
        url: "{{ image_url[os] }}/{{ image_file_name }}"
        dest: /tmp/

    - name: gcloud/gsutil - authorizing with a service account
      command: /usr/bin/gcloud auth activate-service-account --key-file="{{ gcp_service_account_file }}"

    - name: create a bucket
      google.cloud.gcp_storage_bucket:
        name: "{{ gcp_storage_bucket_name }}"
        project: "{{ gcp_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        state: present

    - name: "get MD5 checksum of {{ image_file_name }}"
      command: "/usr/bin/gsutil hash -m /tmp/{{ image_file_name }}"
      register: result_image_md5

    - set_fact:
        md5_checksum: "{{ result_image_md5.stdout.split('\t\t')[-1] }}"

    - name: "upload {{image_file_name}} to gs://{{ gcp_storage_bucket_name }}"
      command: /usr/bin/gsutil -h Content-MD5:{{ md5_checksum }} cp /tmp/{{ image_file_name }} gs://{{ gcp_storage_bucket_name }}

    - name: create image for test
      command: /usr/bin/gcloud compute images create {{ gcp_image_name[os] }}-tmp --source-uri gs://{{ gcp_storage_bucket_name }}/{{ image_file_name }} --guest-os-features="UEFI_COMPATIBLE,GVNIC,SEV_CAPABLE,VIRTIO_SCSI_MULTIQUEUE" --project={{ gcp_project }} --labels=kite=kite-image-{{ gcp_image_name[os] }}

    # image test
    - block:
        - set_fact:
            test_instance_name: "image-test-{{ gcp_image_name[os] }}"

        - name: create gcp instance
          command: /usr/bin/gcloud compute instances create "{{ test_instance_name }}" --zone=us-central1-a --machine-type=n2-standard-4 --boot-disk-auto-delete --boot-disk-size=80GB --boot-disk-type=pd-ssd --metadata-from-file=ssh-keys="{{ playbook_dir }}/key/gcp_key",startup-script="{{ playbook_dir }}/startup-script.sh" --metadata=block-project-ssh-keys=TRUE --provisioning-model=SPOT --image="{{ gcp_image_name[os] }}-tmp" --enable-nested-virtualization --service-account="{{ gcp_service_account_name }}" --project="{{ gcp_project }}" --format=json
          register: result_instance

        - set_fact:
            instance_ip: "{{ result_instance.stdout | from_json | json_query('[0].networkInterfaces[0].accessConfigs[0].natIP') }}"

        - name: Waits until instance is reachable
          wait_for:
            host: "{{ instance_ip }}"
            port: 22
            search_regex: OpenSSH
            delay: 10
          retries: 30
          register: result_ssh_check
          until: result_ssh_check is success

        - name: add instance to guest group
          add_host:
            name: "{{ instance_ip }}"
            group: guest

        - name: keep private key permission to 600
          file:
            path: "{{ playbook_dir }}/key/ostree_key"
            mode: "0600"

        - name: Wait 10 seconds for gcp instance user, key and startup script finished
          wait_for:
            timeout: 10

        # Check nested virtualization support
        - name: nested virtualization checking
          command: ls -al /dev/kvm
          become: yes
          register: result_kvm
          delegate_to: "{{ instance_ip }}"

        - name: nested virtualization does not support
          fail:
            msg: "nested virtualization does not support, image {{ os }} fail"
          when:
            - "'/dev/kvm' not in result_kvm.stdout"

        # https://cloudinit.readthedocs.io/en/latest/topics/modules.html#growpart
        # Image will be resized to 80G (disk size)
        - name: disk growpart feature checking
          command: df -h
          become: yes
          register: result_growpart
          delegate_to: "{{ instance_ip }}"

        - name: disk growpart not support
          fail:
            msg: "can't find disk growpart support, edge image {{ os }} fail"
          when:
            - "'79G' not in result_growpart.stdout"

      rescue:
        - name: "delete {{ image_file_name }} from bucket {{ gcp_storage_bucket_name }}"
          command: /usr/bin/gsutil rm gs://{{ gcp_storage_bucket_name }}/{{ image_file_name }}

        - name: upload GCP image fail
          fail:
            msg: "upload GCP image fail"

      always:
        - name: "delete tmp image {{ gcp_image_name[os] }}-tmp"
          command: /usr/bin/gcloud compute images delete {{ gcp_image_name[os] }}-tmp --quiet --project={{ gcp_project }}

        - name: delete test instance
          command: /usr/bin/gcloud compute instances delete {{ test_instance_name }} --quiet --zone=us-central1-a --delete-disks=all --project={{ gcp_project }}

    - name: old image exists or not
      google.cloud.gcp_compute_image_info:
        filters:
          - name = "{{ gcp_image_name[os] }}"
        project: "{{ gcp_project }}"
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
      register: result_image

    - name: "delete old image {{ gcp_image_name[os] }}"
      command: /usr/bin/gcloud compute images delete {{ gcp_image_name[os] }} --project={{ gcp_project }}
      when: result_image.resources != []

    - name: "create new {{ gcp_image_name[os] }}"
      command: /usr/bin/gcloud compute images create {{ gcp_image_name[os] }} --source-uri gs://{{ gcp_storage_bucket_name }}/{{ image_file_name }} --guest-os-features="UEFI_COMPATIBLE,GVNIC,SEV_CAPABLE,VIRTIO_SCSI_MULTIQUEUE" --project={{ gcp_project }} --labels=kite=kite-image-{{ gcp_image_name[os] }}

    - name: "delete {{ image_file_name }} from bucket {{ gcp_storage_bucket_name }}"
      command: /usr/bin/gsutil rm gs://{{ gcp_storage_bucket_name }}/{{ image_file_name }}
